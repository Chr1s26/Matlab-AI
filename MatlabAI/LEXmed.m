% Example Weights
weights = struct(...
    'gender', 1.5, ...
    'age', 1.0, ...
    'quadrants', [2.0, 0.5, 0.5, 1.0], ...
    'tap', 0.8, ...
    'rectal', 1.0, ...
    'temperature', 2.5, ...
    'leucocyte_count', 3.0 ...
);

% Example Inputs
inputs = struct(...
    'gender', 1, ... % male
    'age', 23, ...
    'quadrants', [1, 1, 0, 1], ... % pain in 1st, 2nd, and 4th quadrant
    'tap', 1, ... % yes
    'rectal', 1, ... % yes
    'temperature', 39, ...
    'leucocyte_count', 13000 ...
);

% Normalize Inputs
normalized_temp = (inputs.temperature - 37) / (40 - 37);
normalized_leuco = (inputs.leucocyte_count - 6000) / (15000 - 6000);

% Calculate Weighted Score
weighted_score = ...
    weights.gender * inputs.gender + ...
    weights.age * (inputs.age / 100) + ...
    sum(weights.quadrants .* inputs.quadrants) + ...
    weights.tap * inputs.tap + ...
    weights.rectal * inputs.rectal + ...
    weights.temperature * normalized_temp + ...
    weights.leucocyte_count * normalized_leuco;

% Output Weighted Score
disp(['Weighted Score: ', num2str(weighted_score)]);

% Normalize to get a probability
total_weight = weights.gender + weights.age + sum(weights.quadrants) + ...
               weights.tap + weights.rectal + weights.temperature + ...
               weights.leucocyte_count;
probability = weighted_score / total_weight;

% Decision Threshold
threshold = 0.5;  % Adjust as needed

if probability > threshold
    diagnosis = 'Likely Disease';
else
    diagnosis = 'Unlikely Disease';
end

disp(['Probability of Disease: ', num2str(probability)]);
disp(['Diagnosis: ', diagnosis]);